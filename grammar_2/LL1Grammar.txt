===LL1-grammar-begin:
Terminals: 32 +  -  ∗  /  =  <  >  (  )  {  }  :=  ;  and  else  end  ic  id  if  int  do  fc  float  not  or  \  print  prog  scan  str  then  while  
Non-terminals: 28 AE  BE  D  DL  E  F  ES  IOS  IS  NE  P  PE  RE  S  SL  T  TY  VL  WS  AE_'  BE_'  E_'  T_'  NT_57  NT_58  NT_59  NT_60  NT_61  
Eps-symbol: ε 
Dollar-symbol: $ 
Start-symbol: P 
===Production-rules-begin:
61
NT_59 -> [ end ] 
NT_59 -> [ else SL end ] 
NT_58 -> [ = E ] 
NT_58 -> [ < E ] 
NT_58 -> [ > E ] 
E_' -> [ ε ] 
E_' -> [ + T E_' ] 
E_' -> [ - T E_' ] 
BE_' -> [ ε ] 
BE_' -> [ or AE BE_' ] 
AE_' -> [ ε ] 
AE_' -> [ and NE AE_' ] 
NE -> [ RE ] 
NE -> [ { BE } ] 
NE -> [ not NE ] 
AE -> [ NE AE_' ] 
P -> [ prog DL SL end ] 
T_' -> [ ε ] 
T_' -> [ ∗ F T_' ] 
T_' -> [ / F T_' ] 
SL -> [ id := E ; SL ] 
SL -> [ scan id SL ] 
SL -> [ print PE SL ] 
SL -> [ ε ] 
SL -> [ if BE then SL NT_60 ] 
SL -> [ WS SL ] 
WS -> [ while BE do SL end ] 
NT_61 -> [ ε ] 
NT_61 -> [ VL ] 
NT_60 -> [ else SL end SL ] 
NT_60 -> [ end SL ] 
RE -> [ T E_' NT_58 ] 
IS -> [ if BE then SL NT_57 ] 
T -> [ id T_' ] 
T -> [ ic T_' ] 
T -> [ fc T_' ] 
T -> [ ( E ) T_' ] 
D -> [ TY VL ; ] 
NT_57 -> [ else SL end ] 
NT_57 -> [ end ] 
TY -> [ float ] 
TY -> [ int ] 
VL -> [ id NT_61 ] 
S -> [ if BE then SL NT_59 ] 
S -> [ print PE ] 
S -> [ scan id ] 
S -> [ id := E ; ] 
S -> [ WS ] 
E -> [ T E_' ] 
ES -> [ id := E ; ] 
IOS -> [ scan id ] 
IOS -> [ print PE ] 
PE -> [ T E_' ] 
PE -> [ str ] 
F -> [ fc ] 
F -> [ ic ] 
F -> [ id ] 
F -> [ ( E ) ] 
DL -> [ ε ] 
DL -> [ TY VL ; DL ] 
BE -> [ NE AE_' BE_' ] 
===Production-rules-end
===LL1-grammar-end
